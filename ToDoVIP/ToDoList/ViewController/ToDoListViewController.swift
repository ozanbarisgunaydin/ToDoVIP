//
//  ToDoListViewController.swift
//  ToDoVIP
//
//  Created by Ozan Barış Günaydın on 29.11.2021.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

/// Provides fetched data
protocol ToDoListDisplayLogic: AnyObject {
    func displayFetcedDatas(viewModel: ToDoList.FetchDatas.ViewModel)
}

final class ToDoListViewController: UIViewController, ToDoListDisplayLogic {
    
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var collectionView: UICollectionView!
    
    private var initialLabel: UILabel = {
        let label = UILabel()
        label.text = "⬆ Please select a day. ⬆"
        label.textAlignment = .center
        label.textColor = .darkGray
        label.font = .boldSystemFont(ofSize: 20)
        return label
    }()
    
    /// Model for the image of the slider view.
    private let models = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
    
    // MARK: Variables for Displaying Data
    private var taskModel = [String]()
    private var checkModel = [String]()
    private var storedDatas = [ToDoList.FetchDatas.ViewModel.DisplayedData]()
    private var selectedCheckArray = [String]()
    private var selectedIndex = 0
    
    var interactor: ToDoListBusinessLogic?
    var router: (NSObjectProtocol & ToDoListRoutingLogic & ToDoListDataPassing)?
    
    // MARK: Object Lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: SetUp
    
    private func setup()
    {
        let viewController = self
        let interactor = ToDoListInteractor()
        let presenter = ToDoListPresenter()
        let router = ToDoListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View LifeCycle
    override func viewDidLoad(){
        super.viewDidLoad()
        fetchDatas()
        collectionViewSetUp()
        tableView.delegate = self
        tableView.dataSource = self
    }
    
    /// Loads data from user defaults
    private func readDatas() {
        let defaults = UserDefaults.standard
        if let savedDatas = defaults.object(forKey: "myKey") as? Data {
            let decoder = JSONDecoder()
            if let loadedData = try? decoder.decode([ToDoList.FetchDatas.ViewModel.DisplayedData].self, from: savedDatas) {
                storedDatas = loadedData
            }
        }
    }
    
    /// Saves data to user defaults
    private func saveDatas() {
        let encoder = JSONEncoder()
        if let encoded = try? encoder.encode(storedDatas) {
            let defaults = UserDefaults.standard
            defaults.set(encoded, forKey: "myKey")
        }
        
    }
    /// Initial selecting row at collection view cell
    override func viewWillAppear(_ animated: Bool) {
        gradientLayer()
        initialLabelConfigure()
        tableView.reloadData()

    }
    
    /// Proive the title of the table view and gradient colored background layer
    private func gradientLayer() {
        let gradientLayer = CAGradientLayer()
        gradientLayer.frame = titleLabel.bounds
        gradientLayer.colors = [UIColor.systemBackground.cgColor, UIColor.systemMint.cgColor, UIColor.systemBackground.cgColor]
        titleLabel.layer.addSublayer(gradientLayer)
        let view = UILabel()
        view.frame = CGRect(x: 0, y: 0, width: self.view.frame.size.width, height: titleLabel.frame.size.height)
        view.backgroundColor = .clear
        titleLabel.addSubview(view)
        view.text = "To Do List"
        view.font = .boldSystemFont(ofSize: 35)
        view.textAlignment = .center
    }
    
    /// Configuration of the label for empty table view
    private func initialLabelConfigure() {
        initialLabel.frame = CGRect(x: 0, y: 0, width: view.frame.size.width, height: tableView.frame.size.height)
        view.addSubview(initialLabel)
    }
    
    // MARK: Image Slide Configuration
    private func collectionViewSetUp() {
        
        collectionView?.register(ToDoCollectionViewCell.self, forCellWithReuseIdentifier: ToDoCollectionViewCell.identifier)
        collectionView?.showsHorizontalScrollIndicator = false

        collectionView?.delegate = self
        collectionView?.dataSource = self
        
        guard let collectionView = collectionView else { return }
        view.addSubview(collectionView)
    }
    
    // MARK: Fecth Datas
    var displayedDatas: [ToDoList.FetchDatas.ViewModel.DisplayedData] = []
    
    func fetchDatas() {
        let request = ToDoList.FetchDatas.Request()
        interactor?.fetchDatas(request: request)
    }
    
    func displayFetcedDatas(viewModel: ToDoList.FetchDatas.ViewModel){
        displayedDatas = viewModel.displayedDatas
        tableView.reloadData()
    }
}

// MARK: TableView Delegate and DataSource Functions
extension ToDoListViewController: UITableViewDelegate, UITableViewDataSource, ToDoTableViewCellDelegate {
    
    /// Check marks saves and / or loads accroding to the selection
    func checkBoxToggle(sender: ToDoTableViewCell) {
        
        readDatas()
    
        if let selectedIndexPath = tableView.indexPath(for: sender) {
            let boolean = checkModel[selectedIndexPath.row].boolValue
            if boolean == false {
                checkModel[selectedIndexPath.row] = "1"
            } else {
                checkModel[selectedIndexPath.row] = "0"
            }
            
            let joinedStrings = checkModel.joined(separator: ", ")
            
            selectedCheckArray = [joinedStrings]
            
            /// If the there is no stored data the first selections will be taking from fetched datas. After that the data saved to the proper structure.
            if storedDatas.isEmpty {
                displayedDatas[selectedIndex].completed = selectedCheckArray[0]
                storedDatas = displayedDatas
                saveDatas()
            } else {
                storedDatas[selectedIndex].completed = selectedCheckArray[0]
                saveDatas()
            }
            
            tableView.reloadRows(at: [selectedIndexPath], with: .automatic)
        }
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return taskModel.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: ToDoTableViewCell.identifier, for: indexPath) as! ToDoTableViewCell
        
        /// Delegeta implemention for the table view cell's check box function (a.k.a. : checkBoxToggle)
        cell.delegate = self

        cell.checkBox.isSelected = checkModel[indexPath.row].boolValue
        cell.toDoText.text = taskModel[indexPath.row]

        return cell
    }
}

// MARK: Collection View Delegate and DataSource Functions
extension ToDoListViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return models.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: ToDoCollectionViewCell.identifier, for: indexPath) as! ToDoCollectionViewCell

        cell.configure(with: models[indexPath.row])
        
        return cell
    }
    
    // MARK: Provide Datas According Selected Day
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        
        initialLabel.isHidden = true
        
        selectedIndex = indexPath.row
        readDatas()

        /// The issue of the  first loading of app the array of datas will be empty. handled.
        if storedDatas.isEmpty {
            let todoArray = displayedDatas[indexPath.row].task.components(separatedBy: ", ")
            taskModel = todoArray
            
            let checkArray = displayedDatas[indexPath.row].completed.components(separatedBy: ", ")
            checkModel = checkArray
            
            selectedCheckArray = [displayedDatas[indexPath.row].completed]
            
            saveDatas()
            
        } else {
            readDatas()
            
            let todoArray = storedDatas[indexPath.row].task.components(separatedBy: ", ")
            taskModel = todoArray
            
            let checkArray = storedDatas[indexPath.row].completed.components(separatedBy: ", ")
            checkModel = checkArray
            
            selectedCheckArray = [storedDatas[indexPath.row].completed]
        
            saveDatas()
        }
        
        tableView.reloadData()
        
    }

}


